[mysqld]
# basic settings #
port = 3306  #端口号
user = mysql #运行账户
datadir=/data/3306/mysql #数据目录
socket=/data/3306/mysql/mysql.sock #socket目录，多实例需要通过socket连接
basedir = /usr/local/mysql #MySQL命令基础目录
sql_mode = "STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER" #sql_mode的标准配置
autocommit = 1 #开启自动提交
server-id = 3701 #设置server_id
character_set_server=utf8mb4 #设置默认字符集
transaction_isolation = READ-COMMITTED #设置事务隔离级别,如果对于性能没有过高要求，默认也是可以的。
explicit_defaults_for_timestamp = 1 
#只要把explicit_defaults_for_timestamp这个变更设置为on；对于timestamp列的值都要显示指定，那么这一默认行为就算是关闭了,explicit_defaults_for_timestamp 变量会直接影响表结构，也就是说explicit_defaults_for_timestamp的作用时间是在表定义的时候；你的update | insert 想通过它去改变行为已经太晚了
max_allowed_packet = 64M #避免语句过长无法插入数据，默认是4M
event_scheduler = 1 #开启事件调度器


# connection #
interactive_timeout = 1800 #服务器关闭交互式连接前等待活动的秒数
wait_timeout = 1800  #服务器关闭非交互连接之前等待活动的秒数
lock_wait_timeout = 1800 #增加锁等待时间 
skip_name_resolve = 1 #禁用DNS主机名查找
max_connections = 1024 #最大连接数
max_user_connections = 256 #每个用户的最大连接数
max_connect_errors = 1000000  #最大的错误连接数

## table cache performance settings #
table_open_cache = 4096 #指定表高速缓存的大小
table_definition_cache = 4096 #缓存表定义(.frm)文件的数量
table_open_cache_instances = 64 #表缓存实例数

# session memory settings #
read_buffer_size = 16M
#是MySQL读入缓冲区的大小，将对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区，read_buffer_size变量控制这一缓冲区的大小，如果对表的顺序扫描非常频繁，并你认为频繁扫描进行的太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能，read_buffer_size变量控制这一提高表的顺序扫描的效率 数据文件顺序。

read_rnd_buffer_size = 32M
#控制键值的缓冲区大小，当大于该值时，执行器对已经缓存的数据根据RowID进行排序，并通过RowID来取得行数据，默认256K

sort_buffer_size = 32M
#每个session 需要做一个排序分配的一个buffer

tmp_table_size = 64M
#控制内存临时表的最大值,超过限值后就往硬盘写，写的位置由变量 tmpdir 决定

join_buffer_size = 128M
#联合查询操作所能使用的缓冲区大小

thread_cache_size = 64
#当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)

# log settings #
log-error=/data/3306/mysql/mysql.log
log_bin = /data/3306/mysql/mysql-bin
log_error_verbosity = 2
#表示错误日志记录的信息，1：只记录error信息；2：记录error和warnings信息；3：记录error、warnings和普通的notes信息。5.7新功能

#general_log_file = general.log
#全局日志不建议开启

slow_query_log = 1 #开启慢查询日志
slow_query_log_file = /data/3306/mysql/slow.log #慢查询日志的路径
log_queries_not_using_indexes = 1
#如果运行的SQL语句没有使用索引，则mysql数据库同样会将这条SQL语句记录到慢查询日志文件中

log_slow_admin_statements = 1 #记录ALTER TABLE等语句引发的慢查询
log_slow_slave_statements = 1 ##记录从服务器产生的慢查询
log_throttle_queries_not_using_indexes = 10 #表示每分钟允许记录到slow log的且未使用索引的SQL语句次数
expire_logs_days = 30 #用来控制binlog日志文件保留时间，超过保留时间的binlog日志会被自动删除
###
#对于mysql binlog过期删除策略，我们可以做出如下推测。
#    1. mysql是根据binlog文件的操作系统最近修改时间，来判断binlog是否过期(而不是根据binlog日志中事物发生的时间)。
#    2. 在触发mysql过期删除时，mysql先检查*bin.index文件，找到目前最老的binlog，然后检查该文件的系统时间，会有如下两种情况：
#    1)如果发现该文件未过期，则认为目前没有binlog日志过期,不进行删除,即使此时有其他binlog已过期。
#    2)如果发现该文件已经过期，则会找下一个binlog，判断是否过期,同样存在两种情况(过期或者未过期),如此往复,直到找到第一个过期的binlog停止继续查找，并删除该binlog及所有该binlog之前的所有日志。
###
long_query_time = 2 #慢查询日志的记录阀值
min_examined_row_limit = 100  
#查询检查返回少于该参数指定行的SQL不被记录到慢查询日志

log-bin-trust-function-creators = 1
#将log_bin_trust_function_creators参数设置为ON，这样一来开启了log-bin的MySQL Server便可以随意创建function。这里存在潜在的数据安全问题，除非明确的知道创建的function在master和slave上的行为完全一致.

log-slave-updates = 1
#log_slave_updates参数用来控制slave是否把所有的操作写入到binary log，默认的情况下mysql是关闭的


# innodb settings #
innodb_page_size = 16384
#MySQL5.6开始，一个新参数innodb_page_size可以设置Innodb数据页为8K,4K，默认为16K。这个参数在一开始初始化时就要加入my.cnf里，如果已经创建了表，再修改，启动MySQL会报错.

innodb_buffer_pool_size = 8G
##索引和数据缓冲区大小，一般设置物理内存的60%-70%

innodb_buffer_pool_instances = 4
##缓冲池实例个数，推荐设置4个或8个,如果是32核心可以设置为16

innodb_buffer_pool_load_at_startup = 1
#在启动时把热数据加载到内存

innodb_buffer_pool_dump_at_shutdown = 1
#在关闭时把热数据dump到本地磁盘

innodb_lru_scan_depth = 4096
#默认值为 1024. 这是mysql 5.6中引入的一个新选项.简单来说,如果增大了 innodb_io_capacity 值, 应该同时增加 innodb_lru_scan_depth.

innodb_lock_wait_timeout = 5
#指的是事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败；参数的时间单位是秒，最小可设置为1s(此时需要考虑应用端的频繁异常处理会消耗性能，不能设置过小)
innodb_io_capacity = 10000
innodb_io_capacity_max = 20000
#innodb_io_capacity and innodb_io_capacity_max —— 这些设置会影响InnoDB每秒在后台执行多少操作. 在 以前的一篇文章 里我描述了大多数写IO(除了写InnoDB日志)是后台操作的. 如果你深度了解硬件性能(如每秒可以执行多少次IO操作),则使用这些功能是很可取的,而不是让它闲着.

innodb_flush_method = O_DIRECT
#fdatasync被认为是安全的，因为在MySQL总会调用fsync来flush数据。使用O_DSYNC是有些风险的，有些OS会忽略该参数O_SYNC;O_DIRECT和fdatasync和很类似，但是它会使用O_DIRECT来打开数据文件。有数据表明，如果是大量随机写入操作，O_DIRECT会提升效率。但是顺序写入和读取效率都会降低。所以使用O_DIRECT需要谨慎。

innodb_undo_logs = 128
#undo回滚段的数量， 至少大于等于35，默认128

innodb_undo_tablespaces = 3
#参数必须大于或等于2，即回收（收缩）一个undo log日志文件时，要保证另一个undo log是可用的

innodb_flush_neighbors = 0
#默认值为 1. 在SSD存储上应设置为0(禁用) ,因为使用顺序IO没有任何性能收益. 在使用RAID的某些硬件上也应该禁用此设置,因为逻辑上连续的块在物理磁盘上并不能保证也是连续的

innodb_log_file_size = 256M
# 一般太小的logfile size的表现情况就是checkpoint比较频繁，导致刷新dirty page到磁盘的次数增加，在刷新时会使整个系统变得很慢.所以这种情况要尽量避免,默认是5M。
#几个日值成员大小加起来差不多和你的innodb_buffer_pool_size相等。上限为每个日值上限大小为4G.一般控制在几个ＬＯＧ文件相加大小在２Ｇ以内为佳。具体情况还需要看你的事务大小，数据大小为依据。说明：这个值分配的大小和数据库的写入速度，事务大小，异常重启后的恢复有很大的关系。

innodb_log_files_in_group = 2
#指定你有几个日志组，默认为2个

innodb_log_buffer_size = 64M
#事务在内存中的缓冲,Innodb_os_log_written(show global status 可以拿到)
innodb_purge_threads = 4
#由于每次DML操作都会生成Undo页，系统需要定期对这些undo页进行清理，也就是所谓purge操作。在5.5之前这些都是在master线程中完成，但5.5及之后的版本可以通过innodb_purge_threads来控制是否使用独立线程进行purge操作,由innodb_purge_threads控制purge线程数
innodb_large_prefix = 1
#修改innodb_large_prefix = 1 ,innodb_file_format= BARRACUDA参数,对row_format为dynamic格式 ,可以指定索引列长度大于767 bytes。但是索引列总长度的不能大于3072 bytes的限制仍然存在

innodb_thread_concurrency = 64
# innodb_thread_concurrency默认是0，则表示没有并发线程数限制，所有请求都会直接请求线程执行。注意：当 innodb_thread_concurrency 设置为0时，则innodb_thread_sleep_delay的设置将会被忽略，不起作用。如果数据库没出现性能问题时，使用默认值即可。
# 当innodb_thread_concurrency>0，则表示有 并发数限制，当一个新的请求发起时，会检查当前并发线程数是否达到了 innodb_thread_concurrency的限制值，如果有，则需要sleep一段时间（sleep的设置详见下一部分），然后再再次请求，如果再次请求时，当前并发数还是达到限制值，那么就会进入FIFO队列等待执行。当进入到内核执行时，会得到一个 消费凭证 ticket，则这个线程，在后面的多次进入innodb执行操作是都不需要重复上面的检查步骤，当把次数消费完，那么这个线程就会被驱逐，等待下次再次进入Innodb，再重新分配ticket。
#当并发用户线程数量小于64，建议设置innodb_thread_concurrency=0
#如果负载不稳定，时而低，时而高到峰值，建议先设置innodb_thread_concurrency=128，并通过不断的降低这个参数，96, 80, 64等等，直到发现能够提供最佳性能的线程数，例如，假设系统通常有40到50个用户，但定期的数量增加至60，70，甚至200。你会发现，性能在80个并发用户设置时表现稳定，如果高于这个数，性能反而下降。在这种情况下，建议设置innodb_thread_concurrency参数为80，以避免影响性能
#如果DB服务器上还允许其他应用，需要限制mysql的线程使用情况，则可以设置可分配给DB的线程数，但是不建议DB上跑其他应用，也不建议这么设置，因为这样可能导致数据库没有对硬件最优使用
#设置过高值，可能会因为系统资源内部争夺导致性能下降
#在大多数情况下，最佳的值是小于并接近虚拟CPU的个数
#定期监控和分析DB，因为随着数据库负载的变化，业务的增加，innodb_thread_concurrency也需要动态的调整

innodb_print_all_deadlocks = 1
#MySQL 5.6之后的版本，可以打开全局变量innodb_print_all_deadlocks=ON，这样死锁相关信息会保存到MySQL 错误日志中

innodb_strict_mode = 1
#开启InnoDB严格检查模式涉及的参数是innodb_strict_mode，默认为OFF，支持动态开启，开启方式如下：set global innodb_strict_mode=1;

innodb_sort_buffer_size = 64M
#指定在创建InnoDB索引期间用于排序数据的排序缓冲区的大小

innodb_write_io_threads = 4
innodb_read_io_threads = 4
#多核cpu可以通过这两个参数更有效的利用cpu性能

innodb_file_per_table = 1
#默认是共享表空间，共享表空间idbdata文件不断增大，影响一定的I/O性能。推荐开启独立表空间模式，每个表的索引和数据都存在自己独立的表空间中，可以实现单表在不同数据库中移动

innodb_stats_persistent_sample_pages = 64
#这个参数控制着采样的数量，跟oracle动态采样参数含义相同,
#1、在EXPLAIN输出中，统计信息不准确，优化器选择了非最优的执行计划。可以通过比较SELECT DISTINCT索引字段和mysql.innodb_index_stats表中的索引的cardinality，来查看索引实际的cardinality的准确性。
#如果统计信息不准确，应该增加innodb_stats_persistent_sample_pages这个参数的值，直到统计信息足够准确为止。如果将这个参数的值增加太大，会导致ANALYZE TABLE操作运行缓慢。
#2、ANALYZE TABLE操作太慢。这时可以考虑减小innodb_stats_persistent_sample_pages这个参数的值，直到ANALYZE TABLE的执行时间能在一个接受的范围内。然而，将这个参数的值设的太小，可能会导致统计信息的不准确，进而影响执行计划的优劣。
#3、如果在统计信息的准确性和ANALYZE TABLE执行时间之间不能取得平衡，考虑减少表中索引字段的数量或减少ANALYZE TABLE所分析的分区数量。

innodb_autoinc_lock_mode = 2
#在binlog_format不是statement的情况下最好是innodb_autoinc_lock_mode=2 这样可能知道更好的性能

innodb_online_alter_log_max_size=1G
#这个参数是mysql 5.6.6引入的，因为在online ddl过程中需要保持delete、update、insert这些数据，所以需要一个日志去保持，这个参数就是限制这个日志的最大大小，当ddl过程中需要的这个日志的大小比这个限制还大的时候就会报错

innodb_open_files=4096
#限制Innodb能打开的表的数据。分配原则：如果库里的表特别多的情况，请增加这个。这个值默认是３００

#innodb_flush_logs_at_trx_commit = 2
#控制事务的提交方式,分配原则：这个参数只有３个值，０，１，２请确认一下自已能接受的级别。默认为１，主库请不要更改了。性能更高的可以设置为０或是２，但会丢失一秒钟的事务。
#MySQL5.7.22中没有此项配置，报错unknown variable 'innodb_flush_logs_at_trx_commit=2'

# replication settings #
master_info_repository = TABLE
relay_log_info_repository = TABLE
#这两个参数会将master.info和relay.info保存在表中，默认是Myisam引擎，官方建议用

sync_binlog = 1
#默认情况下，并不是每次写入时都将binlog与硬盘同步，使用sync_binlog全局变量(1是最安全的值，但也是最慢的)，使binlog在每N次binlog写入后与硬盘同步

gtid_mode = on
enforce_gtid_consistency = 1
log_slave_updates
#开启GTID需要启用这三个参数

binlog_format = ROW #binlog日志模式
binlog_rows_query_log_events = 1
#在row模式下.开启该参数,将把sql语句打印到binlog日志里面.默认是0(off);虽然将语句放入了binlog,但不会执行这个sql,就相当于注释一样.但对于dba来说,在查看binlog的时候,很有用处

relay_log = relay.log
relay_log_recovery = 1
#当slave从库宕机后，假如relay-log损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的relay-log，并且重新从master上获取日志，这样就保证了relay-log的完整性。默认情况下该功能是关闭的，将relay_log_recovery的值设置为 1时，可在slave从库上开启该功能，建议开启。

slave_skip_errors = ddl_exist_errors
#slave-skip-errors的作用就是用来定义复制过程中从服务器可以自动跳过的错误号，当复制过程中遇到定义的错误号，就可以自动跳过，直接执行后面的SQL语句

slave-rows-search-algorithms = 'INDEX_SCAN,HASH_SCAN'
#可以部分解决无主键表导致的复制延迟问题，其基本思路是对于在一个ROWS EVENT中的所有前镜像收集起来，然后在一次扫描全表时，判断HASH中的每一条记录进行更新

# semi sync replication settings #
##开启lossless replication 无损复制，5.7新特性
plugin-load = "group_replication.so;validate_password.so;semisync_master.so;semisync_slave.so"
loose_rpl_semi_sync_master_enabled = 1
loose_rpl_semi_sync_master_timeout = 3000
loose_rpl_semi_sync_slave_enabled = 1

# password plugin #
#密码插件
validate_password_policy = STRONG
validate-password = FORCE_PLUS_PERMANENT

# perforamnce_schema settings
performance-schema-instrument='memory/%=COUNTED'
performance_schema_digests_size = 40000
performance_schema_max_table_instances = 40000
performance_schema_max_sql_text_length = 4096
performance_schema_max_digest_length = 4096

[mysqld-5.6]
# metalock performance settings
metadata_locks_hash_instances = 64
# 提升大并发下的元数据锁性能，注意该参数仅在MySQL 5.6版本下有效，5.7版本已经使用无锁结构进行优化

[mysqld-5.7]
# new innodb settings #
loose_innodb_numa_interleave = 1
#当设置innodb_numa_interleave=1的时候，对于mysqld进程的numa内存分配策略设置为MPOL_INTERLEAVE，而一旦Innodb buffer pool分配完毕，则策略重新设置回MPOL_DEFAULT，二进制包是不支持的

innodb_buffer_pool_dump_pct = 40
#表示转储每个bp instance LRU上最热的page的百分比。通过设置该参数可以减少转储的page数

innodb_page_cleaners = 16
#设置多个page cleaner线程提高脏页刷新效率 

innodb_undo_log_truncate = 1
#参数设置为1，即开启在线回收（收缩）undo log日志文件，支持动态设置

innodb_max_undo_log_size = 2G
#当超过这个阀值（默认是1G），会触发truncate回收（收缩）动作，truncate后空间缩小到10M

innodb_purge_rseg_truncate_frequency = 128
#控制回收（收缩）undo log的频率。undo log空间在它的回滚段没有得到释放之前不会收缩，想要增加释放回滚区间的频率，就得降低innodb_purge_rseg_truncate_frequency设定值

# new replication settings #
slave-parallel-type = LOGICAL_CLOCK
slave-parallel-workers = 16
#MySQL 5.6中，设置参数slave_parallel_workers = 4(>1)，即可有4个SQL Thread（coordinator线程）来进行并行复制，其状态为：Waiting for an evant from Coordinator。但是其并行只是基于Schema的，也就是基于库的。如果数据库实例中存在多个Schema，这样设置对于Slave复制的速度可以有比较大的提升。通常情况下单库多表是更常见的一种情形，那基于库的并发就没有卵用。其核心思想是：不同schema下的表并发提交时的数据不会相互影响，即slave节点可以用对relay log中不同的schema各分配一个类似SQL功能的线程，来重放relay log中主库已经提交的事务，保持数据与主库一致。
#在MySQL 5.7中，引入了基于组提交的并行复制（Enhanced Multi-threaded Slaves），设置参数slave_parallel_workers>0并且global.slave_parallel_type＝‘LOGICAL_CLOCK’，即可支持一个schema下，slave_parallel_workers个的worker线程并发执行relay log中主库提交的事务。其核心思想：一个组提交的事务都是可以并行回放（配合binary log group commit；slave机器的relay log中 last_committed相同的事务（sequence_num不同）可以并发执行

slave_preserve_commit_order = 1
#对于多线程slaves，来保障事务在slave上执行的顺序与relay log中的顺序严格一致，只有当“slave_parallel_workers”开启时有效；此时“log_bin”、“log_slave_updates”必须开启，而且“slave_parallel_type”值必须为“LOGICAL_CLOCK”（默认值为DATABASE）

slave_transaction_retries = 128
#如果SQL线程在执行事务时发生InnoDB死锁且等待超时后，slave重试的次数，默认为10，如果超过此次数，slave将会抛出error且终止replication，并行复制并不支持“slave_transaction_retries”，这个bug所造成的ERROR 1756已经在5.7.5被修复。


# other change settings #
binlog_gtid_simple_recovery = 1
#5.7.6以前保持默认设置simplified_binlog_gtid_recovery=flase，但是这会导致过多的binlog扫描，况且5.6没有mysql.gtid_executed的支持，从库必须开启log_slave_updates，这会带来性能影响。所以还是少用Gtid。
#5.7.6以后由于对每个binlog都有Previous gtid Event的支持binlog_gtid_simple_recovery=true是合理的设置，binlog扫描非常的快因为只是第一个和最后一个binlog文件而已。


log_timestamps = system
#log_timestamps 参数默认使用 UTC 时区，这样会使得日志中记录的时间比中国这边的慢了 8 个小时，导致查看日志不方便。修改为 SYSTEM 就能解决问题。

show_compatibility_56 = on
#MySql中show global status等访问系统状态指令无法使用，这是因为版本高的mysql中show_compatibility_56的默认值为OFF，不让用户访问GLOBAL_STATUS或者GLOBAL_VARIABLES等表，官方的说法是以后的版本将要使用Performance Schema Status Variable Tables表格将在意后的版本中逐渐替代老的The INFORMATION_SCHEMA GLOBAL_STATUS表格。

# group replication settings
plugin-load = "group_replication.so;validate_password.so;semisync_master.so;semisync_slave.so"
transaction-write-set-extraction = XXHASH64
# report_host = 127.0.0.1 # optional for group replication
# binlog_checksum = NONE # only for group replication
loose_group_replication = FORCE_PLUS_PERMANENT
loose_group_replication_group_name = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
loose_group_replication_compression_threshold = 100
loose_group_replication_flow_control_mode = 0
loose_group_replication_single_primary_mode = 0
loose_group_replication_enforce_update_everywhere_checks = 1
loose_group_replication_transaction_size_limit = 10485760
loose_group_replication_unreachable_majority_timeout = 120
loose_group_replication_start_on_boot = 0


# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
#MySQL数据库及表(仅MyISAM)支持符号链接(symbolic link)，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录。要支持符号链接，需要在配置中设置symbolic-links=1
# Settings user and group are ignored when systemd is used.
# If you need to run mysqld under a different user or group,
# customize your systemd unit file for mariadb according to the
# instructions in http://fedoraproject.org/wiki/Systemd

pid-file=/data/3306/mysql/mysql.pid
#[mysqld_safe]
#log-error=/data/3306/mysql/mysql.log
#pid-file=/data/3306/mysql/mysql.pid

#
# include all files from the config directory
#
#!includedir /etc/my.cnf.d

